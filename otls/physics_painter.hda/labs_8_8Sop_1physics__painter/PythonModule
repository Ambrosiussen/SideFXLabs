def CreateNewSubnet():
    return hou.node("/obj").createNode("subnet", "PhysicsPainter_Data")

def Clean(a_Path):
    t_node = hou.node(a_Path)
    if a_Path != "" and t_node is not None:
        hou.node(a_Path).parent().destroy()

def CreateLocalCopy(a_Parent, a_Container):
    Geometry = a_Container.createNode("geo")

    ObjMerge = Geometry.createNode("object_merge")
    ObjMerge.parm("objpath1").set(a_Parent.path()+"/OUT_POST_PHYSICSOBJECTS")

    TimeShift = Geometry.createNode("timeshift")
    TimeShift.parm("frame").deleteAllKeyframes()
    TimeShift.parm("frame").set(hou.intFrame())
    TimeShift.setNextInput(ObjMerge)
    TimeShift.moveToGoodPosition()

    Output = Geometry.createNode("output")
    Output.setNextInput(TimeShift)
    Output.moveToGoodPosition()
    Output.setDisplayFlag(True)
    Output.setRenderFlag(True)
    Output.setHardLocked(1)

    return Geometry

def DryPaint(node):
    ContainerObject = CreateNewSubnet()
    Output = CreateLocalCopy(node, ContainerObject)
    Cache = node.parm("objPrevSim").evalAsString()
    node.parm("objPrevSim").set(Output.path())

    hou.node(node.path()+"/drawcurve1").parm("stroke_numstrokes").set(0)
    node.parm("btnClearCurrent").pressButton()
    Clean(Cache)
    node.parm('Activate_All').set(0)
    hou.setFrame(1)
    node.setCurrent(True, clear_all_selected=True)

def ResetCurrent(node):
    hou.node(node.path()+"/drawcurve1").parm("stroke_numstrokes").set(0)
    node.parm('Activate_All').set(0)
    hou.setFrame(1)
    node.setCurrent(True, clear_all_selected=True)

def ActivateAll(node):
    hou.setFrame(1)
    node.parm('Activate_All').set(1)
    node.setCurrent(True, clear_all_selected=True)


def ClearAll(node):
    Clean(node.parm("objPrevSim").evalAsString())
    hou.node(node.path()+"/IN_PREVIOUS_SIM").parm("objpath1").set("")
    node.parm('Activate_All').set(0)
    ResetCurrent(node)
    node.setCurrent(True, clear_all_selected=True)


def QuickAdd(node):
    Paths = node.evalParm('opQuickAdd').split()
    node.parm('opQuickAdd').set("")
    Weight = node.evalParm('fQuickWeight')

    if Paths:
        for i in Paths:
            index = node.parm('folder2').evalAsInt()

            relpath = node.relativePathTo(hou.node(i))

            node.parm('folder2').insertMultiParmInstance(index)
            node.parm('objObjPath'+str(index+1)).set(relpath)
            node.parm('fChance'+str(index+1)).set(Weight)