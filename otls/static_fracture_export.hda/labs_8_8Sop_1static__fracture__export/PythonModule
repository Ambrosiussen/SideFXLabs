def CreateNewSubnet(a_ContainerName):
    a_ContainerName = a_ContainerName if a_ContainerName != "" else "FRACTURE_CONTAINER"
    
    existing = hou.node("/obj/" + a_ContainerName)
    if existing and hou.pwd().parm("delete_before_export").eval():
        existing.destroy()
        
    
    return hou.node("/obj").createNode("subnet", a_ContainerName)


def SetTransforms(a_Node, a_Point):
    a_Node.parmTuple("t").set(a_Point.position())

    # # invert if not a zero scale matrix
    # try:
    #     baked_transform = a_Prim.fullTransform()
    # except: 
    #     raise hou.Error("Invalid transforms found. Ensure your packed geometry has valid intrinsic:packedfulltransform values")


    # pos = baked_transform.extractTranslates()
    # rot = baked_transform.extractRotates()
    # scale = baked_transform.extractScales()
   
    # for i, parm_name in enumerate(["tx", "ty", "tz"]):
    #     a_Node.parm(parm_name).set(pos[i])

    # for i, parm_name in enumerate(["rx", "ry", "rz"]):
    #     a_Node.parm(parm_name).set(rot[i])

    # for i, parm_name in enumerate(["sx", "sy", "sz"]):
    #     a_Node.parm(parm_name).set(scale[i])



def CreateGeoFracContainer(a_Source, a_ContainerDir, a_ContainerName, a_GroupName, a_Frame):
    Geometry = hou.node(a_ContainerDir).createNode("geo", "%s" % a_ContainerName)
    ObjMerge = Geometry.createNode("object_merge")
    ObjMerge.parm("objpath1").set(a_Source)
    ObjMerge.parm("group1").set(str(a_GroupName))

    MatchSize = Geometry.createNode("matchsize")
    MatchSize.setNextInput(ObjMerge)

    TimeShift = Geometry.createNode("timeshift")
    TimeShift.parm("frame").deleteAllKeyframes()
    TimeShift.parm("frame").set(a_Frame)
    TimeShift.setNextInput(MatchSize)

    Output = Geometry.createNode("output")
    Output.setNextInput(TimeShift)
    Output.setDisplayFlag(True)
    Output.setRenderFlag(True)
    Output.setHardLocked(1)

    Geometry.layoutChildren()
    SetTransforms(Geometry, ObjMerge.geometry().points()[0])

def Main():
    # Parm Data
    Frame = hou.pwd().parm("iFrame").evalAsInt()
    ContainerName = hou.pwd().parm("sContainerName").evalAsString()
    ExportMode = hou.pwd().parm("mExportMode").evalAsInt()
    PieceAttribute = hou.pwd().parm("sPieceAttribute").evalAsString()

    # Geometry Data
    GeometrySource = hou.node("%s/FRACTURE_OBJECT" % hou.pwd().path())
    Geometry = GeometrySource.geometry()
    
    # Export Container
    ExportContainer = CreateNewSubnet(ContainerName)

    # Just export Packed Prims
    if ExportMode == 0:
        for i, prim in enumerate(Geometry.prims()):
            name = prim.attribValue("name")
            CreateGeoFracContainer(GeometrySource.path(), ExportContainer.path(), name, "@name={}".format(name), Frame)

    # Export Based on Attr
    elif ExportMode == 1:
        SourceArray = list(hou.node("%s/UniqueVals" % hou.pwd().path()).geometry().stringListAttribValue("UniqueDetVals"))

        for i, attr in enumerate(SourceArray):
            CreateGeoFracContainer(GeometrySource.path(), ExportContainer.path(), attr, "@%s=%s" % (PieceAttribute, attr), Frame)

    ExportContainer.layoutChildren()