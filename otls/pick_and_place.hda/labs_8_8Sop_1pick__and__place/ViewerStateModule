"""
State:          Labs::pick and place
State type:     labs::pick_and_place
Description:    Labs::pick and place
Author:         Paul_Ambrosiussen
Date Created:   April 26, 2020 - 18:38:01
"""


import hou, math
import viewerstate.utils as su

class State(object):
    def __init__(self, state_name, scene_viewer):
        self.state_name = state_name
        self.scene_viewer = scene_viewer

        self.multiparm = None
        self.placed_pos = hou.Vector3()
        self.picked = False
        self.hitnormal = hou.Vector3()
        self.startvector = hou.Vector3()
        self.rotationstep = "freehand"
        self.scalestep = "freehand"
        self.alignment = "surfacenormal"
        self.collisionmode = "complex"
        self.copypreviousscale = False
        self.copyscale = hou.Vector3()
        
        self.planepos = hou.Vector3()
        self.tweakInstance = -1


    def onEnter(self, kwargs):
        node = kwargs["node"]
        self.multiparm = node.parm("iPlacements")

        self.NewMultiparmEntry(kwargs)
        node.parm("iCurID").set(0)

    def onExit(self, kwargs):
        MPInstance = self.multiparm.evalAsInt()
        self.multiparm.set(MPInstance-1)

    def NewMultiparmEntry(self, kwargs):
        node = kwargs["node"]
        MPInstance = self.multiparm.evalAsInt()
        self.multiparm.set(MPInstance+1)

    # Used to create a new object at position if no custom index is specified. Otherwise it will update it
    def SetPosition(self, kwargs, a_position, a_normal, a_index=-1):
        node = kwargs["node"]
        MPInstance = self.multiparm.evalAsInt()

        if MPInstance == 0:
            self.NewMultiparmEntry(kwargs)
            MPInstance= 1

        if a_index != -1:
            MPInstance = a_index

        AlignWithSurfacenormal = 0 if self.alignment == "up" else 1

        node.parmTuple("vPosition_%s" % (MPInstance)).set(tuple(a_position))
        node.parmTuple("vHitNormal_%s" % (MPInstance)).set(tuple(a_normal))
        node.parm("bAlignToSurface_%s" % MPInstance).set(AlignWithSurfacenormal)

    # Used to set the ID of the last object, or the custom index if provided
    def SetID(self, kwargs, a_id, a_index=-1):
        node = kwargs["node"]
        MPInstance = self.multiparm.evalAsInt()

        if a_index != -1:
            MPInstance = a_index

        node.parm("iID_{}".format(MPInstance)).set(a_id) 

    # Used to set the Rotation of the last object, or the custom index if provided
    def SetRotation(self, kwargs, a_rotation=None, a_index=-1):
        node = kwargs["node"]
        MPInstance = self.multiparm.evalAsInt()

        if a_index != -1:
            MPInstance = a_index

        _rotation = 0.0

        if a_rotation:
            _rotation = a_rotation
        else:
            vector1 = self.startvector.normalized()
            vector2 = hou.Vector3(self.planepos - self.placed_pos).normalized()

            dot = max(min(vector1.dot(vector2), 1.0), -1.0)
            _rotation = math.acos(dot)
            cross = vector1.cross(vector2)

            if self.hitnormal.normalized().dot(cross) < 0:
                _rotation = math.degrees(_rotation)
                _rotation = 180.0 + (180.0-_rotation)
            else:
                _rotation = math.degrees(_rotation)

            if self.rotationstep != "freehand":
                Steps = round(_rotation / float(self.rotationstep))
                _rotation = Steps * float(self.rotationstep)

        node.parmTuple("vRotate_{}".format(MPInstance)).set((0.0, _rotation, 0.0))

    # Used to set the Scale of the last object, or the custom index if provided
    def SetScale(self, kwargs, a_scale=None, a_index=-1):
        node = kwargs["node"]
        MPInstance = self.multiparm.evalAsInt()

        if a_index != -1:
            MPInstance = a_index

        _scale = self.placed_pos.distanceTo(self.planepos)

        if a_scale != None:
            _scale = a_scale
        else:
            if self.copypreviousscale:
                _scale = self.previousscale
            else:
                if self.scalestep != "freehand":
                    Steps = round(_scale / float(self.scalestep))
                    _scale = max(Steps, 1.0) * float(self.scalestep)

        node.parmTuple("vScale_{}".format(MPInstance)).set((_scale, _scale, _scale))

    def onMouseWheelEvent(self, kwargs):

        device = kwargs["ui_event"].device()
        node = kwargs["node"]

        scroll = device.mouseWheel()
        MPInstance = self.multiparm.evalAsInt()

        new_value = node.parm("iCurID").evalAsInt() + int(scroll)
        new_value = max(0, min(new_value, node.node("PAINT_OBJECTS").geometry().attribValue("NumObjects")-1))
        
        node.parm("iCurID").set(new_value)
        self.SetID(kwargs, node.parm("iCurID").evalAsInt())

        return True

    # Allow user to change the tweaking mode
    def onMenuAction(self, kwargs):
        node = kwargs["node"]
        MPInstance = self.multiparm.evalAsInt()


        self.rotationstep = kwargs["rotate_snapping"]
        self.scalestep = kwargs["scale_snapping"]
        self.copypreviousscale = kwargs["previousscale"]

        if kwargs["menu_item"] == "previousscale":
            if self.copypreviousscale:
                if MPInstance > 0:
                    self.previousscale = node.parmTuple("vScale_%s" % (MPInstance-1)).eval()[0]

        self.alignment = "surfacenormal" if kwargs["alignment"] == 1 else "up"
        self.collisionmode = "complex" if kwargs['collisionmode'] == True else "simple"

    def onMouseEvent(self, kwargs):
        ui_event = kwargs["ui_event"]
        reason = ui_event.reason()
        device = ui_event.device()
        origin, direction = ui_event.ray()
        node = kwargs["node"]

        # Geometry and Intersected Position
        ComplexCollisionGeo = None

        if self.collisionmode == "complex":
            ComplexCollisionGeo = node.node("OUT_COLLISIONCOMPLEX").geometry()
        else:
            ComplexCollisionGeo = node.node("OUT_COLLIDERSIMPLE").geometry()

        gi = su.GeometryIntersector(ComplexCollisionGeo, scene_viewer=self.scene_viewer)
        gi.intersect(origin, direction)

        intersected = gi.prim_num != -1
        pos = gi.position
        hitnormal = gi.normal

        
        if not device.isCtrlKey(): # Simply Placing
            # We are hovering collision geometry, or have not started placing an object yet
            if intersected == True and self.picked == False:
                self.SetPosition(kwargs, pos, hitnormal)
                self.SetID(kwargs, node.parm("iCurID").evalAsInt())
                if self.copypreviousscale:
                    self.SetScale(kwargs)
                else:
                    self.SetScale(kwargs, 1.0)

                if reason == hou.uiEventReason.Start:
                    self.picked = True
                    self.placed_pos = pos
                    self.hitnormal = hitnormal

            # We started placing an object
            else:
                if self.picked == True:
                    
                    self.planepos = hou.hmath.intersectPlane(self.placed_pos, self.hitnormal, origin, direction)

                    if self.startvector == hou.Vector3():
                        self.startvector = hou.Vector3(self.planepos - self.placed_pos).normalized()

                    # After picking initial placement... Setting scale and rotation
                    if reason == hou.uiEventReason.Active:

                        self.SetScale(kwargs)
                        self.SetRotation(kwargs)

                    # Done placing
                    elif reason == hou.uiEventReason.Changed:
                        self.NewMultiparmEntry(kwargs)
                        self.picked = False
                        self.startvector = hou.Vector3()
        else:
            # Hide the "new object", since we're tweaking existing objects
            self.SetScale(kwargs, a_scale=0.0)

            if intersected >= 0:

                # Started placing object
                if reason == hou.uiEventReason.Start:
                    ComplexCollisionGeo = node.node("OUT_COLLISIONCOMPLEX").geometry()
                    gi = su.GeometryIntersector(ComplexCollisionGeo, scene_viewer=self.scene_viewer)
                    gi.intersect(origin, direction)
                    
                    self.tweakInstance = ComplexCollisionGeo.iterPrims()[gi.prim_num].intAttribValue("__MultiParmID")

                    if self.tweakInstance == -1:
                        return
                    node.parm("iCurID").set(node.parm("iID_{}".format(self.tweakInstance)).evalAsInt())
                    if self.startvector == hou.Vector3():
                        self.startvector = hou.Vector3(self.planepos - self.placed_pos).normalized()

                # Busy moving the object
                elif reason == hou.uiEventReason.Active:

                    if self.tweakInstance == -1:
                        return

                    if not device.isShiftKey():
                        _uvw = hou.Vector3()
                        _hit = ComplexCollisionGeo.intersect(origin, direction, self.placed_pos, self.hitnormal, _uvw, pattern="!@__MultiParmID={0}".format(self.tweakInstance), tolerance=0.03)
                        self.SetPosition(kwargs, self.placed_pos, self.hitnormal, self.tweakInstance)
                        self.SetID(kwargs, node.parm("iCurID").evalAsInt(), self.tweakInstance)
                    else:
                        self.planepos = hou.hmath.intersectPlane(self.placed_pos, self.hitnormal, origin, direction)
                        self.SetScale(kwargs, a_index=self.tweakInstance)
                        self.SetRotation(kwargs, a_index=self.tweakInstance)
                        

def createViewerStateTemplate():
    """ Mandatory entry point to create and return the viewer state 
        template to register. """

    state_typename = kwargs["type"].definition().sections()["DefaultState"].contents()
    state_label = "Labs Pick and Place"
    state_cat = hou.sopNodeTypeCategory()

    template = hou.ViewerStateTemplate(state_typename, state_label, state_cat)
    template.bindFactory(State)
    template.bindIcon(kwargs["type"].icon())


    # Create and bind context menu
    menu = hou.ViewerStateMenu('tweak_menu', 'Tweak Menu')
    menu.addToggleItem('collisionmode', 'Place on Others', True)
    menu.addToggleItem('previousscale', 'Copy Previous Scale', False)
    menu.addToggleItem('alignment', 'Align to surfacenormal', True)
    menu.addRadioStrip("scale_snapping", "Scale Step Size", "freehand")

    #hk = su.hotkey(state_typename, 'translate', '1', 'Translate')
    menu.addRadioStripItem("scale_snapping", "freehand", "No Snapping")#, hk)#, translate_key)
    menu.addRadioStripItem("scale_snapping", "0.1", "0.1")#, rotate_key)
    menu.addRadioStripItem("scale_snapping", "0.25", "0.25")#, scale_key)
    menu.addRadioStripItem("scale_snapping", "1.0", "1.0")#, scale_key)
    menu.addRadioStripItem("scale_snapping", "10.0", "10.0")#, scale_key)

    menu.addRadioStrip("rotate_snapping", "Rotation Step Size", "freehand")
    menu.addRadioStripItem("rotate_snapping", "freehand", "No Snapping")
    menu.addRadioStripItem("rotate_snapping", "5", "5")
    menu.addRadioStripItem("rotate_snapping", "10", "10")
    menu.addRadioStripItem("rotate_snapping", "30", "30")
    menu.addRadioStripItem("rotate_snapping", "45", "45")
    menu.addRadioStripItem("rotate_snapping", "90", "90")


    template.bindMenu(menu)




    return template
